#SELECT-1 Query
SELECT * FROM CITY
WHERE POPULATION>100000 AND COUNTRYCODE = 'USA';

#SELECT-2 Query
SELECT NAME FROM CITY WHERE POPULATION > 120000 AND COUNTRYCODE = 'USA';

#SELECT-All
SELECT * FROM CITY;

#SELECT BY ID
SELECT * FROM CITY WHERE ID=1661;

#Japanese City Attributes
SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';

#Names of Japanese Cities
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';

#Weather Obs. Station-1
SELECT CITY, STATE FROM STATION;

#Weather Obs. Station-3 ()
SELECT CITY FROM STATION WHERE mod(ID,2)=0 GROUP BY CITY; #Used to even out

#Weather Obs. Station-4 ()
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION; #Diff b/w total & unique cities

#Weather Obs. Station-5 ()
# O/p Req. is city with max & min length with its length displayed and arranged in alphabetical order
(SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) ASC, CITY  LIMIT 1)
UNION
(SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1);

#Weather Observation Station 6()
## Need city name all, starting with vowels
SELECT CITY FROM STATION WHERE CITY LIKE 'a%'or CITY LIKE 'e%'or CITY LIKE'i%'or CITY LIKE 'o%'or CITY LIKE'u%' order by CITY;

#Weather Observation Station 7
## Need city name all, ending with vowels
SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u';

#Weather Observation Station 8()()
## City names with First and Last letters as "Vowels"
SELECT DISTINCT city FROM station 
WHERE LEFT(city,1) IN ('a','e','i','o','u') /*first letter from left*/
AND RIGHT(city, 1) IN ('a','e','i','o','u');/*first letter from right*/

#Weather Observation Station 9()
##City names not starting with Vowels
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY REGEXP '^[^aeiou]';

#Weather Observation Station 10()()
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY NOT REGEXP '[aeiou$]$';

#Weather Observation Station 11
## CITY names from STATION that either do not start with vowels or do not end with vowels.
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY REGEXP '^[^aeiou]' OR CITY NOT REGEXP '[aeiou$]$';

#Weather Observation Station 12
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY REGEXP '^[^aeiou].*[^aeiou]$';

#Higher than 75 Marks
SELECT Name FROM Students 
WHERE Marks>75 
ORDER BY SUBSTR(Name,-3,3),ID ASC;

#Employee Names
SELECT name FROM Employee ORDER BY name;

#Employees Salries
SELECT name FROM Employee WHERE salary>2000 AND months<10;

#Top Earners()()
SELECT salary*months as earnings, 
COUNT(*) FROM Employee 
GROUP BY earnings 
ORDER BY earnings DESC LIMIT 1;
/*Count(*)-Counts all the employees*/
/*GROUP BY-Clusters all the employees having similar earnings*/
/*LIMIT 1-Gives the Max. O/P only*/

#Weather Obs. Station-2
SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2) FROM Station;

#Weather Obs. Station-13
SELECT TRUNCATE(SUM(LAT_N),4) FROM Station WHERE LAT_N> 38.7880 AND LAT_N<137.2345;

#WOS-15()
SELECT ROUND((LONG_W),4) FROM Station 
WHERE LAT_N = (SELECT MAX(LAT_N) FROM Station WHERE LAT_N<137.2345);

#WOS-16
SELECT ROUND(MIN(LAT_N),4) FROM Station WHERE LAT_N>38.7780;

#WOS-17
/*
 conditions are given for same parameter = Sub Queries.
*/
SELECT ROUND(LONG_W,4) FROM Station 
WHERE LAT_N = (SELECT MIN(LAT_N) FROM Station WHERE LAT_N>38.7780);

#WOS-18
/* Manhattan Distance
 |a-c| + |b-d| = ABS(MIN(LAT_N)-MAX(LAT_N)) + ABS(MIN(LONG_W)-MAX(LONG_W))
*/
SELECT ROUND(ABS(MIN(LAT_N)-MAX(LAT_N)) + ABS(MIN(LONG_W)-MAX(LONG_W)),4) FROM Station;

#WOS-19
/* Eucledian Distance
SQRT(POWER(MAX(LAT_N)-MIN(LAT_N),2) + POWER(MAX(LONG_W)-MIN(LONG_W),2))
*/
SELECT ROUND(SQRT((POWER(MAX(LAT_N)-MIN(LAT_N),2)) + (POWER(MAX(LONG_W)-MIN(LONG_W),2))),4) FROM Station;

#WOS-20()()()
/* 0. (1) col. to be parted into 2 halves, having equal size for Median */
/* 1. We have to combine CERTAIN ROWS of a table (for Specified Col. | LAT_N|) with OTHER ROWS of the SAME TABLE(for Specified Col. | LAT_N|) -> Use "SELF-JOINS"*/
/* 2. We Joined STATION Table with itself, using Diff. ALIASES (Indicators) */
/* 3. In 1st WHERE Clause, we Count 1 part of the row < Median */
/* 4. Compare it with remaining part of the row > Median */
SELECT ROUND(S.LAT_N, 4) FROM STATION S
JOIN STATION D ON S.ID = D.ID /* Not Necessary just for Easier explanation*/
WHERE (SELECT COUNT(D.Lat_N) FROM STATION D
WHERE D.Lat_N < S.LAT_N) = (SELECT COUNT(D.Lat_N) FROM STATION D
                        WHERE D.Lat_N > S.LAT_N);
                        
#African Cities
SELECT ALL i.NAME 
FROM CITY i
JOIN COUNTRY y ON i.COUNTRYCODE = y.CODE
WHERE CONTINENT = 'Africa';

#Average Population of Each Continent
SELECT y.CONTINENT, FLOOR(AVG(i.POPULATION)) 
FROM CITY i 
JOIN COUNTRY y ON i.COUNTRYCODE = y.CODE
GROUP BY y.CONTINENT; /*For All Continent Names, Included GROUP BY*/

#Type of Traingles()()
SELECT 
     CASE
         WHEN (a+b>c) AND (b+c>a) AND (a+c>b) THEN /*Triangle Rule*/
             CASE
                 WHEN (a=b) AND (b=c) AND (c=a) THEN 'Equilateral'
                 WHEN (a=b) OR (b=c) OR (c=a) THEN 'Isosceles'
                 ELSE 'Scalene'
            END 
         ELSE 'Not A Triangle'
    END
FROM TRIANGLES;

#The PADS()()()
SELECT CONCAT(name, '(', SUBSTR(occupation,1,1), ')')
FROM occupations
ORDER BY name asc;
SELECT CONCAT('There are a total of ', COUNT(1), ' ' , lower(occupation), 's.')
FROM occupations
GROUP BY occupation
ORDER BY COUNT(1) ASC, occupation ASC;


#Pivot Occupations()()()()
/*Step:1 - Create a virtual table in your head of the data given to us. It looks like this https://imgur.com/u6DEcNQset 

Step:2 - Create an index column with respect to occupation as "RowNumber".https://imgur.com/QzVCWFn

Notice from the image, under the professor column, the first Name is indexed as 1, the next name "Birtney" is 2. That is what I mean by index w.r.t occupation.

The below code will only give the "RowNumber" column, to get the result like in the image proceeds to step 3.

Step 3:
Combine the result 

STEP 4:
Now, Order_by name then Group_By RowNumber.
Using Min/Max, if there is a name, it will return it, if not, return NULL.

*/

/* || @r: = @r +1 || It's a variable. So each time the occupation is found in the results it's generating a +1 row number per occupation as a result of the case statement*/

set @r1=0, @r2=0, @r3=0, @r4=0;                     /*Setting Up Variables associated w.r.t. col.*/
select min(Doctor), min(Professor), min(Singer), min(Actor)         /*O/P required*/
from(                                                                     /*Preparing Indexes as RowNumber w.r.t. Occupation and Columns*/
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
    case when Occupation='Doctor' then Name end as Doctor,       /*Putting Values that follow the condn. into respective                                                                               column*/
    case when Occupation='Professor' then Name end as Professor,
    case when Occupation='Singer' then Name end as Singer,
    case when Occupation='Actor' then Name end as Actor
  from OCCUPATIONS
  order by Name
    ) temp
group by RowNumber;


#Binary Tree Nodes()()()

/*When P is null in table - > Root*/
/*For DISTINCT P Apart from NULL, - > Inner */
/*Gave Space in inverted ' ' to Match the test case pattern*/
SELECT CASE
        WHEN P IS NULL THEN CONCAT(N,' Root')
        WHEN N IN (SELECT DISTINCT P FROM BST) THEN CONCAT(N, ' Inner')
        ELSE CONCAT(N,' Leaf')
       END
FROM BST
ORDER BY N ASC;

